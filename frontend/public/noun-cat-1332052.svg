<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   width="1200pt"
   height="1200pt"
   version="1.1"
   viewBox="0 0 1200 1200"
   id="svg4"
   sodipodi:docname="noun-cat-1332052.svg"
   inkscape:version="1.3 (0e150ed6c4, 2023-07-21)"
   inkscape:export-filename="cat-logo.svg"
   inkscape:export-xdpi="96"
   inkscape:export-ydpi="96"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <defs
     id="defs4">
    <meshgradient
       inkscape:collect="always"
       id="meshgradient12"
       gradientUnits="userSpaceOnUse"
       x="205.55846"
       y="200.91884">
      <meshrow
         id="meshrow12">
        <meshpatch
           id="meshpatch12">
          <stop
             path="c 402.72,0  805.439,0  1208.16,0"
             style="stop-color:#ffffff;stop-opacity:1"
             id="stop13" />
          <stop
             path="c 0,387.844  0,775.687  0,1163.53"
             style="stop-color:#ac9d93;stop-opacity:1"
             id="stop14" />
          <stop
             path="c -402.72,0  -805.439,0  -1208.16,0"
             style="stop-color:#ffffff;stop-opacity:1"
             id="stop15" />
          <stop
             path="c 0,-387.844  0,-775.687  0,-1163.53"
             style="stop-color:#ac9d93;stop-opacity:1"
             id="stop16" />
        </meshpatch>
      </meshrow>
    </meshgradient>
  </defs>
  <sodipodi:namedview
     id="namedview4"
     pagecolor="#ffffff"
     bordercolor="#000000"
     borderopacity="0.25"
     inkscape:showpageshadow="2"
     inkscape:pageopacity="0.0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#d1d1d1"
     inkscape:document-units="pt"
     inkscape:zoom="0.408125"
     inkscape:cx="812.25115"
     inkscape:cy="780.39816"
     inkscape:window-width="1536"
     inkscape:window-height="892"
     inkscape:window-x="0"
     inkscape:window-y="0"
     inkscape:window-maximized="1"
     inkscape:current-layer="svg4" />
  <g
     id="g4">
    <path
       d="m1152 864c-28.801-30-66-49.199-106.8-60 6-36 7.1992-74.398 4.8008-111.6-4.8008-52.801-18-108-40.801-160.8 74.398-98.398 93.602-231.6 93.602-351.6 0-12-9.6016-21.602-21.602-21.602-112.8 0-216 51.602-297.6 127.2-18-7.1992-36-13.199-55.199-16.801 1.1992 0 1.1992 0 2.3984-1.1992 18-6 39.602-7.1992 56.398-16.801 8.3984-4.8008 9.6016-20.398 0-25.199-1.1992-4.8008-3.6016-8.3984-9.6016-9.6016-105.6-24-218.4-20.398-320.4 13.199-39.602-44.398-90-74.398-146.4-92.398-38.398-13.199-133.2-43.199-171.6-19.199-37.199 22.801-16.801 94.801-10.801 129.6 9.6016 64.801 26.398 135.6 60 194.4-69.602 120-81.602 268.8-16.801 392.4-50.398 28.801-94.801 69.602-123.6 117.6-8.3984 13.199 10.801 27.602 21.602 16.801 39.602-40.801 79.199-74.398 122.4-100.8 3.6016 6 7.1992 10.801 10.801 16.801 13.199 18 27.602 33.602 43.199 49.199-25.199 34.801-45.602 70.801-63.602 109.2-7.1992 16.801 15.602 31.199 25.199 14.398 19.199-36 40.801-68.398 64.801-99.602 124.8 102 301.2 127.2 460.8 103.2 84-13.199 172.8-42 235.2-102l1.1992-1.1992c2.3984 2.3984 6 4.8008 8.3984 6 45.602 37.199 82.801 81.602 120 127.2 9.6016 10.801 26.398-3.6016 19.199-14.398-27.602-49.199-72-102-124.8-145.2 20.398-27.602 34.801-58.801 44.398-91.199 33.602 7.1992 67.199 20.398 100.8 45.602 10.812 4.8047 22.812-11.992 14.414-21.594zm-148.8-93.602c-1.1992 8.3984-2.3984 15.602-3.6016 24-56.398-7.1992-115.2-1.1992-165.6 12-12 3.6016-9.6016 20.398 2.3984 21.602 54 2.3984 104.4-2.3984 152.4 1.1992-8.3984 25.199-21.602 48-37.199 68.398-40.801-27.602-85.199-46.801-127.2-54-12-2.3984-19.199 12-8.3984 19.199 36 22.801 74.398 40.801 110.4 62.398-112.8 106.8-325.2 118.8-468 79.199-61.199-16.801-115.2-45.602-159.6-84 25.199-30 51.602-58.801 79.199-87.602 8.3984-8.3984-2.3984-22.801-13.199-16.801-34.801 21.602-64.801 48-92.398 79.199-15.602-16.801-30-33.602-43.199-52.801 31.199-15.602 63.602-30 100.8-42 9.6016-3.6016 8.3984-20.398-2.3984-19.199-39.602 2.3984-79.199 13.199-117.6 30-51.602-94.801-60-211.2-4.8008-325.2 3.6016-6 6-12 9.6016-19.199 7.1992-1.1992 14.398-7.1992 10.801-15.602-13.199-45.602-33.602-90-45.602-135.6-8.3984-31.199-34.801-112.8-25.199-150 40.801 30 81.602 60 118.8 96 39.602 37.199 68.398 80.398 103.2 121.2 8.3984 9.6016 21.602-2.3984 16.801-13.199-39.602-86.398-121.2-170.4-205.2-220.8 39.602 3.6016 106.8 30 123.6 37.199 48 20.398 88.801 50.398 123.6 90 14.398 15.602 32.398 4.8008 37.199-10.801 76.801-24 159.6-32.398 241.2-27.602-15.602 6-32.398 13.199-42 25.199-2.3984 2.3984-3.6016 4.8008-4.8008 7.1992-2.3984 8.3984 1.1992 18 10.801 21.602 27.602 9.6016 54 19.199 79.199 31.199 3.6016 13.199 21.602 22.801 36 10.801 70.801-61.199 142.8-110.4 231.6-128.4-28.801 20.398-55.199 45.602-76.801 67.199-38.398 38.398-80.398 86.398-99.602 138-4.8008 13.199 14.398 24 24 14.398 36-39.602 62.398-87.602 100.8-126 26.398-27.602 58.801-49.199 88.801-73.199-2.3984 110.4-45.602 207.6-92.398 309.6-3.6016 7.1992 0 15.602 6 19.199 0 0-1.1992 1.1992-1.1992 1.1992 25.199 69.613 35.996 144.02 28.797 214.81z"
       id="path1" />
    <path
       d="m705.6 816c-6 13.199-8.3984 27.602-19.199 38.398-13.199 13.199-33.602 18-51.602 13.199-25.199-7.1992-33.602-26.398-43.199-44.398 18-9.6016 36-28.801 30-46.801-2.3984-7.1992-8.3984-13.199-16.801-13.199-16.801-1.1992-20.398 14.398-32.398 21.602-10.801 6-19.199-7.1992-28.801-10.801-7.1992-2.3984-14.398 3.6016-14.398 10.801 0 15.602 10.801 30 24 37.199-9.6016 18-18 34.801-39.602 43.199-25.199 9.6016-73.199 1.1992-73.199-33.602 0-13.199-18-14.398-22.801-3.6016-20.398 54 32.398 91.199 82.801 79.199 25.199-6 54-25.199 69.602-50.398 18 25.199 51.602 44.398 76.801 48 48 6 110.4-38.398 86.398-91.199-7.2031-7.1992-22.805-7.1992-27.602 2.4023z"
       id="path2" />
    <path
       d="m357.6 610.8c-7.1992 0-15.602 2.3984-20.398 8.3984-16.801 16.801-9.6016 46.801 10.801 56.398 21.602 10.801 49.199-1.1992 54-25.199 2.3984-12-1.1992-24-10.801-33.602-8.4023-7.1953-21.602-10.797-33.602-5.9961z"
       id="path3" />
    <path
       d="m800.4 649.2c-4.8008 0-8.3984 1.1992-12 4.8008-10.801-1.1992-22.801 4.8008-28.801 15.602-8.3984 13.199-6 30 2.3984 42 9.6016 12 24 15.602 39.602 13.199 30-6 40.801-44.398 19.199-66-4.7969-6-11.996-9.6016-20.398-9.6016z"
       id="path4" />
  </g>
  <path
     style="fill:url(#meshgradient12);stroke:#ac9d93;stroke-width:2.45023;fill-opacity:1"
     d="m 736.29403,1361.0154 c -58.07373,-6.3544 -116.02465,-18.784 -161.48663,-34.6365 -34.63985,-12.0789 -93.70369,-41.3445 -122.74002,-60.8165 -27.01007,-18.1132 -49.93409,-35.7688 -50.11378,-38.5966 -0.13871,-2.1829 42.52825,-51.0394 71.32201,-81.6684 29.93007,-31.8377 36.37217,-39.8486 36.37217,-45.2295 0,-6.7575 -8.62263,-14.6161 -16.03715,-14.6161 -12.67381,0 -67.236,41.281 -105.7504,80.0093 l -25.00348,25.1423 -13.78183,-15.2098 c -18.43269,-20.3426 -41.40981,-50.4911 -39.74764,-52.1532 0.73549,-0.7355 16.61384,-8.2954 35.28523,-16.7998 29.21364,-13.3061 50.24034,-21.6876 91.52838,-36.4843 10.5956,-3.7972 15.79158,-13.1711 12.33713,-22.257 -2.15015,-5.6553 -3.7453,-6.3517 -14.54942,-6.3517 -31.35325,0 -86.82102,12.385 -129.37491,28.887 l -24.93122,9.6682 -12.18445,-27.2408 c -15.89718,-35.5414 -22.83333,-55.61803 -30.57419,-88.49661 -8.69677,-36.93873 -11.4427,-62.13123 -11.4427,-104.98114 0,-72.93695 15.10963,-137.17869 49.3937,-210.0077 9.92343,-21.08013 13.48411,-26.35609 19.25831,-28.53562 4.21666,-1.59162 7.68595,-5.07242 8.57124,-8.59969 1.48428,-5.91385 -7.76572,-35.01413 -39.16762,-123.22041 -15.21297,-42.73243 -36.48123,-116.3853 -48.11251,-166.61562 -8.00336,-34.56298 -12.88845,-96.78408 -7.59868,-96.78408 3.13789,0 64.57464,45.97755 100.96337,75.55817 44.49606,36.17111 97.56346,91.78345 148.27737,155.38828 25.52478,32.01289 48.49487,58.86736 51.04465,59.67665 7.10163,2.25396 17.38296,-6.6905 18.29795,-15.91868 0.56603,-5.70867 -2.66413,-14.2215 -11.99451,-31.61073 -30.79723,-57.39749 -67.3946,-105.48139 -120.80922,-158.72664 -40.05903,-39.93202 -69.42005,-64.53457 -109.31043,-91.59474 -14.00581,-9.50103 -23.67091,-17.2746 -21.478,-17.2746 7.59501,0 59.59219,14.44167 91.30144,25.35802 94.97691,32.69711 153.58775,68.13612 212.88402,128.72018 24.88184,25.42225 31.9962,28.52197 47.27003,20.59556 5.00356,-2.59662 10.81291,-8.20358 12.90965,-12.4599 4.27026,-8.66846 9.94866,-11.04382 50.36662,-21.06897 34.60636,-8.58366 73.22019,-15.58159 110.26034,-19.98233 35.09949,-4.17017 142.58842,-7.75411 149.781,-4.99406 3.61855,1.38856 1.5596,3.18259 -10.13934,8.83472 -28.02757,13.54099 -42.23861,29.85761 -39.36157,45.19353 2.1203,11.3022 9.61421,17.01104 33.25743,25.33541 58.55976,20.61789 86.06473,33.31371 91.05763,42.03075 9.0895,15.86902 31.3218,18.94869 46.8595,6.49109 4.3294,-3.47112 22.2054,-17.9708 39.7245,-32.22151 59.7117,-48.57166 126.1785,-89.26444 184.0129,-112.65772 20.3912,-8.24798 72.0162,-24.05434 73.551,-22.51957 0.3799,0.37995 -8.3401,7.82089 -19.3778,16.53542 -11.0378,8.71453 -39.5401,34.90367 -63.3385,58.1981 -66.6266,65.21574 -103.6619,111.89601 -129.5217,163.25282 -8.7125,17.30266 -14.698,32.34551 -14.698,36.9389 0,10.68185 9.5531,19.38433 21.2792,19.38433 11.6486,0 18.4665,-7.53467 74.0532,-81.83767 53.8999,-72.0484 85.7911,-105.45266 143.8262,-150.65043 23.3876,-18.21424 43.2579,-33.1168 44.1563,-33.1168 2.6348,0 -1.2591,48.5052 -6.4462,80.29983 -12.8464,78.74194 -36.4627,149.54654 -91.1102,273.15906 -27.0177,61.11408 -28.2743,65.63071 -20.8397,74.90367 3.5981,4.48787 15.0554,40.17346 23.7377,73.93453 20.0344,77.90437 25.2164,147.45652 16.7462,224.7657 l -2.7469,25.0721 -6.3815,-1.7424 c -12.6831,-3.4629 -108.2454,-1.6695 -138.6939,2.6028 -43.575,6.1142 -79.8081,14.8517 -83.7088,20.1862 -4.7088,6.4396 -4.0334,15.0334 1.6261,20.6929 4.7349,4.7349 8.1909,4.9016 102.2971,4.9339 53.5681,0.018 99.9084,0.7064 102.9783,1.5289 6.8673,1.8398 6.3127,4.0587 -8.3941,33.5838 -10.797,21.6758 -28.0141,48.9312 -32.7641,51.8668 -1.3872,0.8574 -9.4445,-2.8131 -17.9052,-8.1564 -38.9728,-24.6136 -90.71,-46.5813 -131.314,-55.7561 -21.366,-4.8278 -26.6396,-5.2861 -31.8875,-2.7708 -5.1796,2.4825 -6.2877,4.7185 -6.2877,12.6878 0,12.1284 -0.1066,12.0538 81.0623,56.6778 33.5781,18.46 63.0665,34.9378 65.5298,36.6172 4.0943,2.7913 3.1479,4.1634 -11.026,15.984 -72.6149,60.5587 -179.7256,100.5946 -304.05963,113.6515 -43.72281,4.5915 -135.08761,4.5987 -176.98884,0.014 z M 678.8553,1207.2593 c 8.83747,-3.0128 22.50509,-9.3243 30.37249,-14.0255 14.60525,-8.7276 39.04889,-30.6641 46.30574,-41.5564 l 4.03486,-6.0563 15.31533,15.0062 c 48.13217,47.1605 102.1985,59.247 153.51052,34.3172 34.55838,-16.7901 56.5981,-46.8267 56.5981,-77.1343 0,-29.6 -6.24671,-39.8996 -24.35067,-40.1495 -14.5885,-0.2013 -18.2305,3.3504 -28.26833,27.5675 -11.11012,26.8041 -19.12478,36.6072 -37.13076,45.4167 -26.16666,12.8022 -58.39737,7.2576 -78.59295,-13.5202 -10.50384,-10.8067 -26.21104,-37.0807 -23.52034,-39.3433 1.08363,-0.9112 6.56683,-5.1825 12.18489,-9.4918 15.12431,-11.6011 25.31369,-28.2487 25.31369,-41.3581 0,-12.147 -5.13392,-23.8269 -12.11543,-27.5633 -7.27363,-3.8927 -22.73958,-2.9601 -29.53847,1.7812 -3.36907,2.3495 -10.68193,8.9578 -16.25078,14.6852 -12.42215,12.7758 -19.11471,13.2896 -34.57248,2.6544 -19.81741,-13.6347 -33.29627,-9.068 -32.89056,11.1435 0.28808,14.3519 7.41491,28.1471 20.19093,39.0829 l 10.15301,8.6906 -9.1013,14.9824 c -10.67597,17.5745 -23.10479,30.297 -36.76313,37.6317 -8.15598,4.3799 -13.91326,5.2632 -34.30321,5.2632 -21.97508,0 -25.96835,-0.7199 -38.71606,-6.9795 -16.82166,-8.26 -25.76448,-20.1089 -28.24034,-37.4174 -1.32967,-9.2955 -3.07357,-12.5695 -8.23968,-15.4691 -16.71897,-9.3842 -29.80337,7.688 -29.82883,38.9199 -0.0168,20.6201 3.69593,31.6541 15.78835,46.922 22.13711,27.9504 72.70258,39.6206 112.65541,26.0001 z m 404.3734,-245.11969 c 15.7085,-8.29309 24.9317,-22.61503 26.2436,-40.75124 0.5818,-8.04363 0.4195,-17.16817 -0.3607,-20.27677 -2.5975,-10.34919 -16.3358,-28.28411 -24.7098,-32.25779 -8.8376,-4.19377 -27.2029,-5.31543 -29.379,-1.79433 -0.7235,1.1706 -6.0259,2.87735 -11.7832,3.79278 -14.715,2.33973 -25.4774,10.46246 -32.5617,24.57522 -13.07452,26.04633 -3.2484,56.34227 21.9926,67.80766 14.5048,6.58859 36.9234,6.10283 50.5582,-1.09553 z M 516.25321,898.52567 c 38.13331,-26.42644 21.95067,-87.49964 -23.18491,-87.49964 -15.41106,0 -33.92647,4.67391 -41.20931,10.4026 -19.16168,15.07259 -20.55433,50.75156 -2.73745,70.13222 15.19998,16.5341 48.35896,19.97429 67.13167,6.96482 z"
     id="path5"
     transform="scale(0.75)" />
  <script
     id="mesh_polyfill"
     type="text/javascript">&#10;!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();&#10;</script>
</svg>
